# -*- coding: utf-8 -*-
"""Modelo de predicao - Frexco

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j-cqa9wQSWE5ckFPbdQPHj-yhhxgvhJ3

## DESAFIO:

Previsão de demanda é uma projeção realizada com o intuito de prever o potencial de vendas de um ou mais produtos em um cenário futuro. 

Com base em dados e informações, numéricas e intencionais, o objetivo da previsão é aproximar ao máximo a perspectiva da realidade. Embora não seja possível determinar as ações do futuro, a estimativa permite guiar a tomada de decisão e elaborar um planejamento mais estratégico, voltado para as possibilidades reais do negócio.

Nos diversos setores, a previsão de demanda serve de amparo para nortear e orientar as ações mais importantes.

Nós, da Frexco, trabalhamos com produtos perecíveis e muitos deles possuem uma data de validade curta. Acertar na previsão de demanda é essencial para evitarmos o desperdício de alimentos, além de também ser importante garantir que tenhamos o produto disponível no estoque para venda.

Tendo isso em mente, estruture um script no Python que calcule a previsão de demanda para os próximos 5 dias do item, baseando-se no histórico presente na base de dados em anexo.

Obs: O modelo de previsão pode ser o que você julgue ser o melhor, mas atenção aos detalhes de variação nas vendas!

## RESOLUÇÃO

A partir disso, será criado um modelo de previsão utilizando os dados fornecidos.

Observando os dados, foi escolhido o modelo de previsão **ARIMA**.



### 1. Importação
"""

import pandas as pd
import numpy as np
import warnings
import matplotlib.pyplot as plt
import datetime
import matplotlib.dates as md
from google.colab import auth
from statsmodels.tsa.arima.model import ARIMA
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

warnings.filterwarnings("ignore")

"""Leitura de dados:"""

from google.colab import drive
drive.mount('/content/drive')

dados = pd.read_excel('/content/drive/MyDrive/Dados.xlsx',header=0,index_col=0).sort_index()

"""Será criada uma função MAPE (Mean Absolute Percentage Error) que será utilizada no futuro para calcular o erro dos parametros passados para o ARIMA"""

def mape(actual, pred):
   return np.mean(np.abs((actual - pred) / actual)) * 100

"""## 2. Analisando os dados

Primeiramente vamos visualizar a quantidade de linhas e colunas da base de dados. Então os dados serão plotados em função do tempo.
"""

print("Numero de linhas:", dados.shape[0])
print("Numero de colunas: ", dados.shape[1])
print(dados.index)

plt.figure(figsize = (15, 10))
plt.plot(dados.index, dados.Vendas)
plt.title("Demanda de produto com o tempo", fontsize=25)
plt.ylabel("Demanda")
plt.xlabel("Datas")
plt.xticks( rotation=25 )
plt.xlim([datetime.date(2022, 12, 6), datetime.date(2023, 1, 20)])
plt.show()

"""Por fim, uma analise geral dos dados que foram fornecidos:"""

print(dados.describe().transpose())

"""## 3. Criação do modelo ARIMA

Primeiramente vamos encontrar os parametros que satisfazem nosso modelo:

"""

parametros = [
(1, 1, 1),
(1, 0, 1),
(2, 1, 1),
(3, 1, 1),
(4, 1, 1),
(5, 1, 1),
(2, 1, 2),
(3, 1, 2),
(4, 1, 3),
(5, 1, 3),
(1, 1, 4),
(2, 1, 4),
(3, 1, 4),
(4, 1, 4),
(5, 1, 4),
(10, 1, 1),
(10, 0, 1),
(10, 1, 2),
(10, 1, 3),
(10, 1, 4),
(10, 1, 5)
]

for param in parametros:
   try:
      model = ARIMA(dados.Vendas, order=param).fit()
      acc = mape(dados.Vendas, model.predict(typ = "levels"))
      print("Parametros: ", param, "MAPE:", acc)
   except:
      pass

"""Observando o resultado obtido acima, conclui-se que os parametros mais indicados, isto é, com menor erro é (10, 1, 4). Portanto será adotado este para o modelo ARIMA.

## Treinamento do modelo

Portanto, com os parametros acima, será treinado o modelo.
"""

modelo = ARIMA(dados.Vendas, order=(10,1,4)).fit()
acc = mape(dados.Vendas, modelo.predict(typ="levels"))
print("Mean Absolute Percentage Error: ", acc)

"""Para analisar a confiabilidade do modelo adotado, será comparado com os valores estimados com os reais."""

fig, ax = plt.subplots(figsize=(15, 10))
actual = ax.plot(dados.Vendas, color="deepskyblue")
pred = ax.plot(modelo.predict(typ="levels"), color="red")
plt.title("Demanda de produto com o tempo", fontsize=25)
plt.ylabel("Demanda")
plt.xlabel("Datas")
plt.xticks( rotation=25 )
plt.xlim([datetime.date(2022, 12, 6), datetime.date(2023, 1, 20)])
ax.legend(['Valor real', 'Valor estimado'])

plt.show()

"""Ainda, pode-se fazer uma analise geral dos dados preditos, para comparar com o esperado."""

print((modelo.predict(typ="levels").describe()), '\n\n', dados.describe())

"""## 4. Estimado para valores futuros

Criado o modelo e comparando com os valores reais, percebe-se que esta proximo do esperado. Agora, será estimado para 5 dias posteriores a ultima data. Assim tem-se:
"""

forecasting = modelo.forecast(5, alpha=0.05)
plt.subplots(figsize=(15, 10))
plt.title('Demanda para os proximos 5 dias')
plt.xlabel('Datas')
plt.ylabel('Vendas')
datas = forecasting.index
datenums=md.date2num(datas)
plt.subplots_adjust(bottom=0.2)
plt.xticks( rotation=25 )
ax=plt.gca()
xfmt = md.DateFormatter('%Y-%m-%d %H:%M:%S')
ax.xaxis.set_major_formatter(xfmt)
plt.plot(datenums,forecasting)
plt.show()

print("\n A estimativa para os proximos 5 dias são:\n")
display(forecasting)